"""
This unit test checks sendall() and recvall() methods of
RepySocket.
"""
#pragma repy restrictions.threeports dylink.r2py librepy.r2py

def incoming(remoteip, remoteport, sock, thiscommhandle, listencommhandle):
  bytes = 1024 * 20 # We need to read this much
  read = sock.recvall(bytes)

  if read != data:
    log("Recv'ed data does not match what was sent!\n")

  sleep(0.2)
  sock.close()


# Get the IP, and some ports
ip = getmyip()
free_ports = libsocket.get_connports(ip)
listen_port = free_ports[0]
client_port = free_ports[1]

# Setup a listener
stop_func = waitforconn(ip, listen_port, incoming)

# Connect now
s = openconn(ip, listen_port, localip=ip, localport=client_port)

# Generate some random data
data = (randombytes() + randombytes()) * 10 # 20K of data

# Send all the data
sent = s.sendall(data)

if sent != len(data):
  log("Did not send all the data!\n")

# Close and cleanup
sleep(0.5)
s.close()
stop_func()

