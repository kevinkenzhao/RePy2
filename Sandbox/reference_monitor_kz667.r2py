"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    fn = str(filename)
    checker = 0
    allowed_char = set('abcdefghijklmnopqrstuvwxyz0123456789-_.')
    for char in fn:
      if char not in allowed_char:
        checker = 1
    if checker > 0:
      RepyArgumentError("1+ characters not allowed!")
    elif fn[0] == '.' or fn == '' or fn == '..':
      RepyArgumentError("1+ characters not allowed!")
    else:
      # make the files and add 'SE' to the readat file...
      self.Afn = filename+'.a'
      self.Bfn = filename+'.b'
      if create:
        # Create and open B, or just open B if it exists; if A does not exist already, create/open it and write 'SE', otherwise just open it
        self.Bfile = openfile(self.Bfn,create)
        if self.Afn in listfiles():
          self.Afile = openfile(self.Afn,create)
        else:
          self.Afile = openfile(self.Afn,create)
          self.Afile.writeat('SE',0)
      else:
      # if backup A exists, open it and perform a validity check: if the check fails, raise an exception; if backup A does not exist, raise an exception.
        if self.Afn in listfiles():
          self.Afile = openfile(self.Afn,False)
          self.Bfile = openfile(self.Bfn,True)
          if self.Afile.readat(None,0).startswith("S") and self.Afile.readat(None,0).endswith("E"):
          	self.Bfile.writeat(self.Afile.readat(None,0),0)
          else:
          	raise Exception("Backup file is no good!")
        else:
          raise FileNotFoundError("No backup file found!")

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    if (offset < 0):
      RepyArgumentError("Illegal offset value provided!")
    elif offset > len(self.Bfile.readat(None,0)):
      RepyArgumentError("Writing past EOF not allowed!")
    else:
      self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
  	storeB = self.Bfile.readat(None, 0)
  	#note that calling storeB[0] or any index within the storeB string will result in an index error if nothing has been written to B yet
  	if storeB.startswith("S") and storeB.endswith("E"):
  		self.Afile.close()
  		removefile(self.Afn)
  		self.Afile = openfile(self.Afn, True)
  		self.Afile.writeat(storeB,0)
  		self.Bfile.close()
  		removefile(self.Bfn)
  	else:
  		self.Bfile.close()
  		removefile(self.Bfn)
  	self.Afile.close()

def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()